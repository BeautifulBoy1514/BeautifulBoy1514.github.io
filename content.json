{"meta":{"title":"红拂夜奔的博客","subtitle":null,"description":"律己入梦","author":"王二","url":""},"pages":[{"title":"about","date":"2019-05-12T14:14:36.000Z","updated":"2019-05-17T09:42:40.378Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[红拂夜奔の王二] 与&nbsp; 王二&nbsp; （ 红拂夜奔 ） 对话中... function bot_ui_ini() { var botui = new BotUI(\"hello-mashiro\"); botui.message.add({ delay: 800, content: \"Hi, there111👋\" }).then(function () { botui.message.add({ delay: 1100, content: \"这里是 王二\" }).then(function () { botui.message.add({ delay: 1100, content: \"一个可爱的蓝孩子~\" }).then(function () { botui.action.button({ delay: 1600, action: [{ text: \"然后呢？ 😃\", value: \"sure\" }, { text: \"少废话！ 🙄\", value: \"skip\" }] }).then(function (a) { \"sure\" == a.value && sure(); \"skip\" == a.value && end() }) }) }) }); var sure = function () { botui.message.add({ delay: 600, content: \"😘\" }).then(function () { secondpart() }) }, end = function () { botui.message.add({ delay: 600, content: \"![...](https://view.moezx.cc/images/2018/05/06/a1c4cd0452528b572af37952489372b6.md.jpg)\" }) }, secondpart = function () { botui.message.add({ delay: 1500, content: \"目前就读于苏州的一所大学\" }).then(function () { botui.message.add({ delay: 1500, content: \"向往心理学和文学,却误入计算机科学...\" }).then(function () { botui.message.add({ delay: 1200, content: \"因为数据分析也需要Coder嘛\" }).then(function () { botui.message.add({ delay: 1500, content: \"主攻 Java 语言和 Python，略懂 C/C++，偶尔也折腾 HTML/CSS/JavaScript\" }).then(function () { botui.message.add({ delay: 1500, content: \"研究的方向，是软件开发\" }).then(function () { botui.message.add({ delay: 1800, content: \"喜欢阅读，希望有一天能够被称为带文学家\" }).then(function () { botui.action.button({ delay: 1100, action: [{ text: \"为什么叫红拂夜奔呢？ 🤔\", value: \"why-王二\" }] }).then(function (a) { thirdpart() }) }) }) }) }) }) }) }, thirdpart = function () { botui.message.add({ delay: 1E3, content: \"王二以及站名都来自一部小说，因为和主角有一样的性格~\" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"为什么是白猫呢？ 🤔\", value: \"why-cat\" }] }).then(function (a) { fourthpart() }) }) }, fourthpart = function () { botui.message.add({ delay: 1E3, content: \"因为对猫有种执念… \" }).then(function () { botui.message.add({ delay: 1100, content: \"而且我真的是猫控！\" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"域名有什么含意吗？(ง •_•)ง\", value: \"why-domain\" }] }).then(function (a) { fifthpart() }) }) }) }, fifthpart = function () { botui.message.add({ delay: 1E3, content: \"emmmm，看备案信息你就知道了=.= 本来想要zheng.xin的，但50万真买不起。。\" }).then(function () { botui.message.add({ delay: 1600, content: \"那么，仔细看看我的博客吧？ ^_^\" }) }) } } bot_ui_ini()","keywords":"关于"},{"title":"图集","date":"2019-05-12T13:47:59.000Z","updated":"2019-08-11T11:14:17.671Z","comments":true,"path":"atlas/index.html","permalink":"/atlas/index.html","excerpt":"","text":"","keywords":"图片分享"},{"title":"bangumi","date":"2019-05-10T13:32:48.000Z","updated":"2019-05-13T08:35:57.605Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-04-29T04:18:53.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"donate","date":"2019-05-12T15:13:05.000Z","updated":"2019-05-13T08:40:58.281Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"comment","date":"2019-05-12T15:13:48.000Z","updated":"2019-05-13T08:39:48.456Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"links","date":"2019-05-12T15:11:06.000Z","updated":"2019-08-11T11:37:26.008Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"lab","date":"2019-05-12T13:47:59.000Z","updated":"2019-05-13T08:41:26.543Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"生活","date":"2019-08-10T13:47:59.000Z","updated":"2019-08-11T11:24:24.348Z","comments":false,"path":"live/index.html","permalink":"/live/index.html","excerpt":"","text":"","keywords":"生活随笔"},{"title":"music","date":"2019-05-12T15:14:28.000Z","updated":"2019-05-13T08:54:36.280Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"数据结构","date":"2019-05-12T14:14:16.000Z","updated":"2019-08-11T10:19:07.326Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"悦读","date":"2019-05-12T13:47:59.000Z","updated":"2019-08-11T11:14:00.595Z","comments":true,"path":"reading/index.html","permalink":"/reading/index.html","excerpt":"","text":"","keywords":"读书分享"},{"title":"sakura","date":"2019-05-12T14:53:25.000Z","updated":"2019-05-17T09:33:46.406Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-04-29T04:18:53.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"线性表(一)","slug":"线性表-一","date":"2019-08-26T08:46:34.000Z","updated":"2019-08-26T09:04:28.895Z","comments":true,"path":"2019/08/26/线性表-一/","link":"","permalink":"/2019/08/26/线性表-一/","excerpt":"","text":"线性表(一) 一.线性表定义:1.线性表是由n(n &gt;= 0)个相同类型的数据元素组成的有限序列，他是最基本最常用的一种线性结构，顾名思义，线性表就像是一条线，不会分叉，线性表有唯一的开始和结束，除了第一个元素外，每一个元素都有唯一的直接前驱，除了最后一个元素外，每个元素都有唯一的直接后继。2.线性表有两种存储方式，顺序存储和链式存储，采用顺序存储的线性表称为顺序表，采用链式存储的线性表称为链表,链表又分为单链表，双向链表和循环链表。 二.线性表中的顺序表1.顺序表采用顺序存储方式及逻辑上相邻的数据，在计算机内的存储位置也是相邻的，顺序存储方式，元素存储是连续的，中间不允许有空，可以快速定位第几个元素，但是插入和删除时需要移动大量元素，根据分配空间方法不同，顺序表可以分为静态分配和动态分配两种方法。 静态分配:顺序表最简单的方法是使用一个定长数组data[]存储数据最大空间为Maxsize,用Length记录实际的元素个数，即顺序表的长度，这种用定成数组存储的方法成为静态分配。 2.采用静态分配方法，定长数组需要预先分配一段固定大小的连续空间，但在运算过程中如何并插入等操作容易超过预分配的空间长度出现溢出，解决静态分配的溢出问题，可以采用动态分配方法。 动态分配:而采用动态存储方法，在运算过程中如果发现溢出，可以另外开辟一段更大的存储空间，用以替换原来的存储空间，从而达到扩充存储空间的目的。 顺序表的定义：#define Maxsize 100 typedef int ElemType; //可以使用typedef简化比较复杂的类型声明，并且可以提高程序的可移植性 typedef struct{ ElemType *elem; //基地址 int length; //顺序表的长度 }SqList;三顺序表的基本操作 初始化(InitList)bool InitList(SqList &amp;L){ //构造一个空的顺序表L L.elem = new ElemType[Maxsize]; if(!L.elem) return false; //分配失败则返回false L.length = 0; return true; } 创建bool CreateList(SqList &amp;L){ ElemType a; int i = 0; cin &gt;&gt; a; while (a != -1){//输入-1时结束，也可以设置其他结束条件 if(L.length == Maxsize){ cout &lt;&lt; &quot;顺序表已满!&quot; &lt;&lt; endl; return false; } cin &gt;&gt; a; L.elem[i++] = a; //将数据存入第i个位置，然后i++ L.length++; //顺序表长度加1 } return true; } 取值bool GetElem(SqList L,int i,ElemType &amp;e){ if(i &lt; 1||i &gt; L.length) return false; //判断i值是否合理 e = L.elem[i-1]; //第i - 1个单元存储这第i个数据 return true; } 查找int LocateElem(SqList L,ElemType e){ for(int i = 0;i &lt; L.length;i++) if(L.elem[i] == e) return i+1; //下标为i，实际为第i + 1个元素 return -1; } 插入bool ListInsert_Sq(SqList &amp;L,int i,ElemType e){ if(i &lt; 1||i &gt; L.length+1) return false; //i值不合法，其临界状态为L.length + 1,直接在尾端插入 if(L.length == Maxsize) return false; for(int j = L.length-1;j &gt;= i - 1;j--) L.elem[j+1] = L.elem[j]; //从最后一个元素开始后移动，直到第i个元素后移 L.elem[i - 1] = e; //将新元素e放入第i个位置 L.length++; return true; } 删除bool ListDelete_Sq(SqList &amp;L,int i,ElemType &amp;e){ if(i &lt; 1||i &gt; L.length) return false; e = L.elem[i-1]; //将欲删除的元素保存在e中 for(int j = i;j &lt;= L.length - 1;j++) L.elem[j-1] = L.elem[j]; //被删除元素之后的元素前移 L.length--; //表长减1 ret 打印void print(SqList L){ cout &lt;&lt; &quot;输出顺序表&quot; &lt;&lt; endl; for(int j = 0;j &lt;= L.length-1;j++) cout &lt;&lt; L.elem[j] &lt;&lt; &quot; &quot;; cout &lt;&lt; endl; } 销毁void DestroyList(SqList &amp;L){ if(L.elem) delete []L.elem; } 总结顺序表的优点:操作简单，存储密度高，可以随机存取，只需要O(1)的时间就可以取出第i个元素。顺序表的缺点:需要预先分配，最大空间最大空间，估计过大或过小都会造成空间的浪费或溢出，插入和删除操作都需要移动大量元素，在实际问题中如果经常需要插入和删除操作，则顺序表的效率很低，为了克服该缺点，可以使用链式存储。问题： 查找函数的平均复杂度为O((n+1)/2),还能采用什么方法更快的查找。 该顺序表无法自动扩充，请想一想如何能实现自动扩充呢？这样做又有什么问题呢？ 测试数据int main(int argc, char const *argv[]) { SqList myL; int i; ElemType e,x; cout &lt;&lt; &quot;1. 初始化\\n&quot;; cout &lt;&lt; &quot;2. 创建\\n&quot;; cout &lt;&lt; &quot;3. 取值\\n&quot;; cout &lt;&lt; &quot;4. 查找\\n&quot;; cout &lt;&lt; &quot;5. 插入\\n&quot;; cout &lt;&lt; &quot;6. 删除\\n&quot;; cout &lt;&lt; &quot;7. 输出\\n&quot;; cout &lt;&lt; &quot;8. 销毁\\n&quot;; cout &lt;&lt; &quot;0. 退出\\n&quot;; int choose=-1; while(choose!= 0) { cout&lt;&lt;&quot;请选择:&quot;; cin&gt;&gt;choose; switch(choose) { case 1://初始化顺序表 cout&lt;&lt;&quot;顺序表初始化...&quot;&lt;&lt;endl; if(InitList(myL)) cout&lt;&lt;&quot;顺序表初始化成功！&quot;&lt;&lt;endl; else cout&lt;&lt;&quot;顺序表初始化失败！&quot;&lt;&lt;endl; break; case 2://创建顺序表 cout&lt;&lt;&quot;顺序表创建...&quot;&lt;&lt;endl; cout&lt;&lt;&quot;输入数据，输入-1结束&quot;&lt;&lt;endl; if(CreateList(myL)) cout&lt;&lt;&quot;顺序表创建成功！&quot;&lt;&lt;endl; else cout&lt;&lt;&quot;顺序表创建失败！&quot;&lt;&lt;endl; break; case 3://取值 cout &lt;&lt;&quot;输入整型数i，取第i个元素输出&quot;&lt;&lt;endl; cin&gt;&gt;i; if(GetElem(myL,i,e)) cout&lt;&lt;&quot;第i个元素是： &quot;&lt;&lt;e&lt;&lt;endl; else cout&lt;&lt;&quot;顺序表取值失败！&quot;&lt;&lt;endl;; //cout&lt;&lt;&quot;第i个元素是： &quot;&lt;&lt;e&lt;&lt;endl; break; case 4://查找 cout &lt;&lt; &quot;请输入要查找的数x:&quot;; cin&gt;&gt;x; if(LocateElem(myL,x)==-1) cout&lt;&lt;&quot;查找失败！&quot;&lt;&lt;endl; else cout&lt;&lt;&quot;查找成功！&quot;&lt;&lt;endl; break; case 5://插入 cout&lt;&lt;&quot;请输入要插入的位置和要插入的数据元素e:&quot;; cin&gt;&gt;i&gt;&gt;e; if(ListInsert_Sq(myL,i,e)) cout&lt;&lt;&quot;插入成功！&quot;&lt;&lt; endl; else cout&lt;&lt;&quot;插入失败！&quot;&lt;&lt;endl; break; case 6://删除 cout&lt;&lt;&quot;请输入要删除的位置i:&quot;; cin&gt;&gt;i; if(ListDelete_Sq(myL,i,e)) cout&lt;&lt;&quot; 删除成功！&quot;&lt;&lt;endl; else cout&lt;&lt;&quot;删除失败！&quot;&lt;&lt;endl; break; case 7://输出 print(myL); break; case 8://销毁 cout&lt;&lt;&quot;顺序表销毁...&quot;&lt;&lt;endl; DestroyList(myL); break; } } system(&quot;pause&quot;); return 0; }","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"/tags/数据结构/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"A+B Problem","slug":"A-B-Problem","date":"2019-08-14T06:34:07.000Z","updated":"2019-08-14T06:35:41.701Z","comments":true,"path":"2019/08/14/A-B-Problem/","link":"","permalink":"/2019/08/14/A-B-Problem/","excerpt":"","text":"A + B Problem 问题:输入两个整数A和B, 求他们的和 但不能使用 + 等数学运算符输入格式: 输入两个整数A,B，用空格隔开，0≤A,B≤10^8输出格式: 输出一个整数，表示这两个数的和样例输入: 3 4样例输出: 7说明:不能使用算术运算符 解题思路: 首先想到的是异或运算，如二进制的11^10=01，每一位异或都相对于每一位的加法，但是缺乏进位。 使用按位与“&amp;”运算可以帮助我们判断该位是否有进位。如11&amp;11 =11，说明两位在加运算中都产生了进位1。由于该进位是加在高位上的，所以把与运算的结果往左移一位，再和异或结果相加，即为最后结果。 C++代码: #include&lt;iostream&gt; using namespace std; int aplusb(int a,int b){ if(b == 0) return a; else return aplusb(a^b,(a&amp;b)&lt;&lt;1); } //终结条件:递归基变为零停止，也就是b == 0; int main(int argc, char const *argv[]) { int a, b; cin &gt;&gt; a &gt;&gt; b; cout &lt;&lt; aplusb(a,b) &lt;&lt; endl; system(&quot;pause&quot;); /* code */ return 0; }","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"/tags/数据结构/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Markdown使用方法","slug":"Markdown使用方法","date":"2019-08-09T09:26:51.000Z","updated":"2019-08-11T11:26:32.124Z","comments":true,"path":"2019/08/09/Markdown使用方法/","link":"","permalink":"/2019/08/09/Markdown使用方法/","excerpt":"","text":"Markdown 简明语法手册标签： Markdown 1. 斜体和粗体使用 * 和 ** 表示斜体和粗体。 示例： 这是 斜体，这是 粗体。 2. 分级标题使用 === 表示一级标题，使用 — 表示二级标题。 示例： 这是一个一级标题 ============================ 这是一个二级标题 -------------------------------------------------- ### 这是一个三级标题你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。 3. 外链接使用 [描述](链接地址) 为文字增加外链接。 示例： 这是去往 本人博客 的链接。 4. 无序列表使用 *，+，- 表示无序列表。 示例： 无序列表项 一 无序列表项 二 无序列表项 三 5. 有序列表使用数字和点表示有序列表。 示例： 有序列表项 一 有序列表项 二 有序列表项 三 6. 文字引用使用 &gt; 表示文字引用。 示例： 野火烧不尽，春风吹又生。 7. 行内代码块使用 `代码` 表示行内代码块。 示例： 让我们聊聊 html。 8. 代码块使用 四个缩进空格 表示代码块。 示例： 这是一个代码块，此行左侧有四个不可见的空格。9. 插入图像使用 ![描述](图片链接地址) 插入图像。 示例： Markdown 高阶语法手册1. 内容目录在段落中填写 [TOC] 以显示全文内容的目录结构。 [TOC] 2. 标签分类在编辑区任意行的列首位置输入以下代码给文稿标签： 标签： 数学 英语 Markdown 或者 Tags： 数学 英语 Markdown 3. 删除线使用 ~~ 表示删除线。 这是一段错误的文本。 4. 注脚使用 [^keyword] 表示注脚。 这是一个注脚[^footnote]的样例。 这是第二个注脚[^footnote2]的样例。 5. LaTeX 公式$ 表示行内公式： 质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 $$ 表示整行公式： $$\\sum_{i=1}^n a_i=0$$ $$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$ $$\\sum^{j-1}{k=0}{\\widehat{\\gamma}{kj} z_k}$$ 访问 MathJax 参考更多使用方法。 6. 加强的代码块支持四十一种编程语言的语法高亮的显示，行号显示。 非代码示例： $ sudo apt-get install vim-gnomePython 示例： @requires_authorization def somefunc(param1=&#39;&#39;, param2=0): &#39;&#39;&#39;A docstring&#39;&#39;&#39; if param1 &gt; param2: # interesting print &#39;Greater&#39; return (param2 - param1 + 1) or None class SomeClass: pass &gt;&gt;&gt; message = &#39;&#39;&#39;interpreter ... prompt&#39;&#39;&#39; JavaScript 示例： /** * nth element in the fibonacci series. * @param n &gt;= 0 * @return the nth element, &gt;= 0. */ function fib(n) { var a = 1, b = 1; var tmp; while (--n &gt;= 0) { tmp = a; a += b; b = tmp; } return a; } document.write(fib(10)); 7. 流程图示例st=&gt;start: Start:&gt;https://www.zybuluo.com io=&gt;inputoutput: verification op=&gt;operation: Your Operation cond=&gt;condition: Yes or No? sub=&gt;subroutine: Your Subroutine e=&gt;end st-&gt;io-&gt;op-&gt;cond cond(yes)-&gt;e cond(no)-&gt;sub-&gt;io 更多语法参考：流程图语法参考8. 序列图示例 1Alice-&gt;Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob--&gt;Alice: I am good thanks! 示例 2Title: Here is a title A-&gt;B: Normal line B--&gt;C: Dashed line C-&gt;&gt;D: Open arrow D--&gt;&gt;A: Dashed open arrow 更多语法参考：序列图语法参考9. 甘特图甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。 title 项目开发流程 section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5d section 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5d section 发布验收 发布: 2d 验收: 3d 更多语法参考：甘特图语法参考10. Mermaid 流程图 A[Hard edge] --&gt;|Link text| B(Round edge) B --&gt; C{Decision} C --&gt;|One| D[Result one] C --&gt;|Two| E[Result two] 更多语法参考：Mermaid 流程图语法参考11. Mermaid 序列图 Alice-&gt;John: Hello John, how are you? loop every minute John--&gt;Alice: Great! end 更多语法参考：Mermaid 序列图语法参考12. 表格支持 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 13. 定义型列表名词 1定义 1（左侧有一个可见的冒号和四个不可见的空格）代码块 2这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 代码块（左侧有八个不可见的空格）14. Html 标签本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格： &lt;table&gt; &lt;tr&gt; &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt; &lt;th&gt;星期一&lt;/th&gt; &lt;th&gt;星期二&lt;/th&gt; &lt;th&gt;星期三&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;李强&lt;/td&gt; &lt;td&gt;张明&lt;/td&gt; &lt;td&gt;王平&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 值班人员 星期一 星期二 星期三 李强 张明 王平 15. 内嵌图标本站的图标系统对外开放，在文档中输入 &lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;即显示微博的图标： 替换 上述 i 标签 内的 icon-weibo 以显示不同的图标，例如： &lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;即显示人人的图标： 更多的图标和玩法可以参看 font-awesome 官方网站。 16. 待办事宜 Todo 列表使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如： - [ ] **Cmd Markdown 开发** - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 - [ ] 支持以 PDF 格式导出文稿 - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments) - [x] 改进 LaTex 功能 - [x] 修复 LaTex 公式渲染问题 - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers) - [ ] **七月旅行准备** - [ ] 准备邮轮上需要携带的物品 - [ ] 浏览日本免税店的物品 - [x] 购买蓝宝石公主号七月一日的船票对应显示如下待办事宜 Todo 列表： Cmd Markdown 开发 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 支持以 PDF 格式导出文稿 新增Todo列表功能 语法参考 改进 LaTex 功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 语法参考 七月旅行准备 准备邮轮上需要携带的物品 浏览日本免税店的物品 购买蓝宝石公主号七月一日的船票","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"教程","slug":"教程","permalink":"/tags/教程/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"组件类和容器类","slug":"组件类和容器类","date":"2019-05-17T09:10:58.000Z","updated":"2019-05-17T09:16:07.511Z","comments":true,"path":"2019/05/17/组件类和容器类/","link":"","permalink":"/2019/05/17/组件类和容器类/","excerpt":"","text":"1.组件的概念组件(component)是构成图形用户界面的基本成分和核心元素，组件类(Component)是一个抽象类，是AWT组件类的根类，实际使用的组件都是Component的子类。Component类提供对组件操作的通用方法，包括设计组件位置，设置组件大小，设计组件字体，响应鼠标或键盘事件，组件重绘等 2.容器 容器(container)是一种特殊组件，他能容纳其他组件。它在可视区域内显示其他组件。由于容器是组件，在容器中还可以放置其他容器，所以可以使用多层容器构成富有变化的界面。 3.窗口和面板 容器有两种：窗口(window)和面板(panel). 窗口可独立存在，可被移动，也可被最大化和最小化，有标题栏，边框，可添加菜单栏。面板不能独立存在，必须包含在另一个容器中，面板没有标题。没有边框，不可以添加菜单栏，一个窗口可以包含多个面板，一个面板也可以包含另一个面板，但面板不能包含窗口。 窗口类和面板类都是容器类的子类。 4.框架与对话框 窗口类(Window)主要有两个子类：框架类(Frame)和对话框类(Dialog)。 框架是一种带标题栏并且可以改变的大小的窗口，在应用程序中，使用框架作为容器，在框架中放置组件。框架类在实例化时默认是最小化的，不可见的，必须通过setSize()方法设置框架大小，通过setVisible()方法使框架可见。 5.标签 标签类(Label)组件用于显示一行文本信息。标签只能显示信息，不能用于输入。 6.按钮 按钮(button)是最常用的组件，用来控制程序的运行方向，用户单击按钮时，计算机将执行一系列命令，完成一系列功能。按钮通过java.awt的 Button类创建。 7.文本编辑组件 文本编辑组件有文本行和文本区。 文本行是一个单行文本编辑框，用于输入一行文字。文本行由java.awt包中的TextField类来创建。 8.Swing组件按功能可分为如下几类: 1、顶层容器:JFrame, JApplet, JDialog和JWindow。 2、中间容器:JPanel, JScrollPane, JSplitPane, JTooIBar等。 3、特殊容器:在用户界面上具有特殊作用的中间容器，如JlnternalFrame、JRootPane、JLayeredPane和JDestopPane等。 4、基本组件:实现人机交互的组件，如Button、 JComboBox、Just, Menu、Mider等。 5、不可编辑信息的显示组件:向用户显示不可编辑信息的组件，如JLabel、JProgressBar和JTooITip等。 6、可编辑信息的显示组件:向用户显示能被编辑的格式化信息的组件，如JTable、JTextArea和JTextField等。 7、特殊对话框组件:可以直接产生特殊对话框的组件，如JColorChoosor和JFileChooser等。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"java","slug":"java","permalink":"/tags/java/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"选择排序","slug":"选择排序","date":"2019-05-17T08:58:06.000Z","updated":"2019-05-17T09:08:33.163Z","comments":true,"path":"2019/05/17/选择排序/","link":"","permalink":"/2019/05/17/选择排序/","excerpt":"","text":"一.选择排序和冒泡排序的区别 1.冒泡排序是比较相邻位置的两个数，二选择排序是按顺序比较，找最大或者最小值。 2.冒泡排序每一轮比较后，位置不对的都需要换位置，选择排序每一轮比较只需要换一次位置。 3.冒泡排序是通过数找位置，选择排序是给定位置去找数。二.冒泡排序优缺点 1.优点：比较简单，空间复杂度低，是稳定的。 2。缺点：时间复杂度太高，效率慢。三。选择排序优缺点 1.优点：一轮只需要换一次位置 2.缺点：效率慢，不稳定（举个例子5，8，5，2，9我们我知道第一遍选择第一个元素5会和2交换，那么原序列中2个5的相对位置前后顺序就被破坏了）。 这是相对简单的版本，他把最小的放在了新列表里面；还有一种做法就是把比较出来的最小值和被比较的位置交换 def findSamllest(arr)://找最小值 smallest = arr[0] smallest_index = 0 for i in range(1,len(arr)): if arr[i] &lt; smallest: smallest = arr[i] smallest_index = i return smallest_index def selectionSort(arr)://找到最小值并且插入到新列表 newArr = [] for i in range(len(arr)): smallest = findSamllest(arr) newArr.append(arr.pop(smallest)) return newArr if __name__ == &#39;__main__&#39;: print(selectionSort([5, 3, 6, 3, 2, 10]))","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"/tags/数据结构/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"二分查找","slug":"二分查找","date":"2019-05-13T13:01:03.000Z","updated":"2019-08-11T11:29:53.556Z","comments":true,"path":"2019/05/13/二分查找/","link":"","permalink":"/2019/05/13/二分查找/","excerpt":"","text":"二分查找 代码示例 def binary_search(list,item): low = 0 high = len(list) - 1 while low &lt;= high: mid = int((low + high)/2) //这里需要注意floa和int转型 guess = list[mid] if guess == item: return mid if guess &gt; mid: high = mid - 1 else: low = mid + 1 return None if __name__ == &#39;__main__&#39;: my_list = [1,2,3] print(my_list) print(binary_search(my_list,1)) 结束","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"/tags/数据结构/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}