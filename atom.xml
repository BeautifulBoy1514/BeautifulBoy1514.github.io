<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>红拂夜奔的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-08-14T06:35:41.701Z</updated>
  <id>/</id>
  
  <author>
    <name>王二</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A+B Problem</title>
    <link href="/2019/08/14/A-B-Problem/"/>
    <id>/2019/08/14/A-B-Problem/</id>
    <published>2019-08-14T06:34:07.000Z</published>
    <updated>2019-08-14T06:35:41.701Z</updated>
    
    <content type="html"><![CDATA[<center>A + B Problem</center><h2 id="问题-输入两个整数A和B-求他们的和-但不能使用-等数学运算符"><a href="#问题-输入两个整数A和B-求他们的和-但不能使用-等数学运算符" class="headerlink" title="问题:输入两个整数A和B, 求他们的和 但不能使用 + 等数学运算符"></a>问题:输入两个整数A和B, 求他们的和 但不能使用 + 等数学运算符</h2><h3 id="输入格式-输入两个整数A-B，用空格隔开，0≤A-B≤10-8"><a href="#输入格式-输入两个整数A-B，用空格隔开，0≤A-B≤10-8" class="headerlink" title="输入格式: 输入两个整数A,B，用空格隔开，0≤A,B≤10^8"></a>输入格式: 输入两个整数A,B，用空格隔开，0≤A,B≤10^8</h3><h3 id="输出格式-输出一个整数，表示这两个数的和"><a href="#输出格式-输出一个整数，表示这两个数的和" class="headerlink" title="输出格式: 输出一个整数，表示这两个数的和"></a>输出格式: 输出一个整数，表示这两个数的和</h3><h3 id="样例输入-3-4"><a href="#样例输入-3-4" class="headerlink" title="样例输入: 3 4"></a>样例输入: <code>3</code> <code>4</code></h3><h3 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出: 7"></a>样例输出: <code>7</code></h3><h3 id="说明-不能使用算术运算符"><a href="#说明-不能使用算术运算符" class="headerlink" title="说明:不能使用算术运算符"></a>说明:<em>不能使用算术运算符</em></h3><hr><p>解题思路:</p><pre><code>首先想到的是异或运算，如二进制的11^10=01，每一位异或都相对于每一位的加法，但是缺乏进位。使用按位与“&amp;”运算可以帮助我们判断该位是否有进位。如11&amp;11 =11，说明两位在加运算中都产生了进位1。由于该进位是加在高位上的，所以把与运算的结果往左移一位，再和异或结果相加，即为最后结果。 </code></pre><p>C++代码:</p><pre><code>#include&lt;iostream&gt;using namespace std;int aplusb(int a,int b){    if(b == 0)        return a;    else        return aplusb(a^b,(a&amp;b)&lt;&lt;1);}//终结条件:递归基变为零停止，也就是b == 0;int main(int argc, char const *argv[]){    int a, b;    cin &gt;&gt; a &gt;&gt; b;    cout &lt;&lt; aplusb(a,b) &lt;&lt; endl;    system(&quot;pause&quot;);    /* code */    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;A + B Problem&lt;/center&gt;

&lt;h2 id=&quot;问题-输入两个整数A和B-求他们的和-但不能使用-等数学运算符&quot;&gt;&lt;a href=&quot;#问题-输入两个整数A和B-求他们的和-但不能使用-等数学运算符&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据结构" scheme="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Markdown使用方法</title>
    <link href="/2019/08/09/Markdown%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>/2019/08/09/Markdown使用方法/</id>
    <published>2019-08-09T09:26:51.000Z</published>
    <updated>2019-08-11T11:26:32.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-简明语法手册"><a href="#Markdown-简明语法手册" class="headerlink" title="Markdown 简明语法手册"></a>Markdown 简明语法手册</h1><p>标签： Markdown</p><hr><h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p><p>示例：</p><p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p><h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p><p>示例：</p><pre><code>这是一个一级标题============================这是一个二级标题--------------------------------------------------### 这是一个三级标题</code></pre><p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p><h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p><p>示例：</p><p>这是去往 <a href="http://BeautifulBoy1514.github.io" target="_blank" rel="noopener">本人博客</a> 的链接。</p><h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p><p>示例：</p><ul><li>无序列表项 一</li><li>无序列表项 二</li><li>无序列表项 三</li></ul><h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p><p>示例：</p><ol><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三</li></ol><h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p><p>示例：</p><blockquote><p>野火烧不尽，春风吹又生。</p></blockquote><h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p><p>示例：</p><p>让我们聊聊 <code>html</code>。</p><h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p><p>示例：</p><pre><code>这是一个代码块，此行左侧有四个不可见的空格。</code></pre><h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p><p>示例：</p><p><img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="我的头像"></p><h1 id="Markdown-高阶语法手册"><a href="#Markdown-高阶语法手册" class="headerlink" title="Markdown 高阶语法手册"></a>Markdown 高阶语法手册</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p><p>[TOC]</p><h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p><p>标签： 数学 英语 Markdown</p><p>或者</p><p>Tags： 数学 英语 Markdown</p><h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p><p><del>这是一段错误的文本。</del></p><h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p><p>这是一个注脚[^footnote]的样例。</p><p>这是第二个注脚[^footnote2]的样例。</p><h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p><p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p><p>$$ 表示整行公式：</p><p>$$\sum_{i=1}^n a_i=0$$</p><p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p><p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p><p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。</p><h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p><p>非代码示例：</p><pre><code>$ sudo apt-get install vim-gnome</code></pre><p>Python 示例：</p><pre><code class="python">@requires_authorizationdef somefunc(param1=&#39;&#39;, param2=0):    &#39;&#39;&#39;A docstring&#39;&#39;&#39;    if param1 &gt; param2: # interesting        print &#39;Greater&#39;    return (param2 - param1 + 1) or Noneclass SomeClass:    pass&gt;&gt;&gt; message = &#39;&#39;&#39;interpreter... prompt&#39;&#39;&#39;</code></pre><p>JavaScript 示例：</p><pre><code class="javascript">/*** nth element in the fibonacci series.* @param n &gt;= 0* @return the nth element, &gt;= 0.*/function fib(n) {  var a = 1, b = 1;  var tmp;  while (--n &gt;= 0) {    tmp = a;    a += b;    b = tmp;  }  return a;}document.write(fib(10));</code></pre><h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre><code class="flow">st=&gt;start: Start:&gt;https://www.zybuluo.comio=&gt;inputoutput: verificationop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?sub=&gt;subroutine: Your Subroutinee=&gt;endst-&gt;io-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;sub-&gt;io</code></pre><h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><pre><code class="seq">Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks!</code></pre><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><pre><code class="seq">Title: Here is a titleA-&gt;B: Normal lineB--&gt;C: Dashed lineC-&gt;&gt;D: Open arrowD--&gt;&gt;A: Dashed open arrow</code></pre><h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p><pre><code class="gantt">    title 项目开发流程    section 项目确定        需求分析       :a1, 2016-06-22, 3d        可行性报告     :after a1, 5d        概念验证       : 5d    section 项目实施        概要设计      :2016-07-05  , 5d        详细设计      :2016-07-08, 10d        编码          :2016-07-15, 10d        测试          :2016-07-22, 5d    section 发布验收        发布: 2d        验收: 3d</code></pre><h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams" target="_blank" rel="noopener">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><pre><code class="graphLR">    A[Hard edge] --&gt;|Link text| B(Round edge)    B --&gt; C{Decision}    C --&gt;|One| D[Result one]    C --&gt;|Two| E[Result two]</code></pre><h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax" target="_blank" rel="noopener">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><pre><code class="sequence">    Alice-&gt;John: Hello John, how are you?    loop every minute        John--&gt;Alice: Great!    end</code></pre><h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams" target="_blank" rel="noopener">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><dl><dt>名词 1</dt><dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><pre><code>    代码块（左侧有八个不可见的空格）</code></pre><h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p><pre><code>&lt;table&gt;    &lt;tr&gt;        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;        &lt;th&gt;星期一&lt;/th&gt;        &lt;th&gt;星期二&lt;/th&gt;        &lt;th&gt;星期三&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;李强&lt;/td&gt;        &lt;td&gt;张明&lt;/td&gt;        &lt;td&gt;王平&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre><table>    <tr>        <th rowspan="2">值班人员</th>        <th>星期一</th>        <th>星期二</th>        <th>星期三</th>    </tr>    <tr>        <td>李强</td>        <td>张明</td>        <td>王平</td>    </tr></table><h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p><pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;</code></pre><p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p><p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p><pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;</code></pre><p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p><p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="noopener">font-awesome</a> 官方网站。</p><h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p><pre><code>- [ ] **Cmd Markdown 开发**    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率    - [ ] 支持以 PDF 格式导出文稿    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)    - [x] 改进 LaTex 功能        - [x] 修复 LaTex 公式渲染问题        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)- [ ] **七月旅行准备**    - [ ] 准备邮轮上需要携带的物品    - [ ] 浏览日本免税店的物品    - [x] 购买蓝宝石公主号七月一日的船票</code></pre><p>对应显示如下待办事宜 Todo 列表：</p><ul><li><input disabled type="checkbox"> <strong>Cmd Markdown 开发</strong><ul><li><input disabled type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li><input disabled type="checkbox"> 支持以 PDF 格式导出文稿</li><li><input checked disabled type="checkbox"> 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="noopener">语法参考</a></li><li><input checked disabled type="checkbox"> 改进 LaTex 功能<ul><li><input checked disabled type="checkbox"> 修复 LaTex 公式渲染问题</li><li><input checked disabled type="checkbox"> 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="noopener">语法参考</a></li></ul></li></ul></li><li><input disabled type="checkbox"> <strong>七月旅行准备</strong><ul><li><input disabled type="checkbox"> 准备邮轮上需要携带的物品</li><li><input disabled type="checkbox"> 浏览日本免税店的物品</li><li><input checked disabled type="checkbox"> 购买蓝宝石公主号七月一日的船票</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdown-简明语法手册&quot;&gt;&lt;a href=&quot;#Markdown-简明语法手册&quot; class=&quot;headerlink&quot; title=&quot;Markdown 简明语法手册&quot;&gt;&lt;/a&gt;Markdown 简明语法手册&lt;/h1&gt;&lt;p&gt;标签： Markdown&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="教程" scheme="/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>组件类和容器类</title>
    <link href="/2019/05/17/%E7%BB%84%E4%BB%B6%E7%B1%BB%E5%92%8C%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    <id>/2019/05/17/组件类和容器类/</id>
    <published>2019-05-17T09:10:58.000Z</published>
    <updated>2019-05-17T09:16:07.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-组件的概念"><a href="#1-组件的概念" class="headerlink" title="1.组件的概念"></a>1.组件的概念</h1><p>组件(component)是构成图形用户界面的基本成分和核心元素，组件类(Component)是一个抽象类，是AWT组件类的根类，实际使用的组件都是Component的子类。Component类提供对组件操作的通用方法，包括设计组件位置，设置组件大小，设计组件字体，响应鼠标或键盘事件，组件重绘等</p><hr><h1 id="2-容器"><a href="#2-容器" class="headerlink" title="2.容器"></a>2.容器</h1><p>   容器(container)是一种特殊组件，他能容纳其他组件。它在可视区域内显示其他组件。由于容器是组件，在容器中还可以放置其他容器，所以可以使用多层容器构成富有变化的界面。</p><hr><h1 id="3-窗口和面板"><a href="#3-窗口和面板" class="headerlink" title="3.窗口和面板"></a>3.窗口和面板</h1><p>   容器有两种：窗口(window)和面板(panel).</p><p>   窗口可独立存在，可被移动，也可被最大化和最小化，有标题栏，边框，可添加菜单栏。面板不能独立存在，必须包含在另一个容器中，面板没有标题。没有边框，不可以添加菜单栏，一个窗口可以包含多个面板，一个面板也可以包含另一个面板，但面板不能包含窗口。</p><p>   窗口类和面板类都是容器类的子类。</p><hr><h1 id="4-框架与对话框"><a href="#4-框架与对话框" class="headerlink" title="4.框架与对话框"></a>4.框架与对话框</h1><p>   窗口类(Window)主要有两个子类：框架类(Frame)和对话框类(Dialog)。</p><p>   框架是一种带标题栏并且可以改变的大小的窗口，在应用程序中，使用框架作为容器，在框架中放置组件。框架类在实例化时默认是最小化的，不可见的，必须通过setSize()方法设置框架大小，通过setVisible()方法使框架可见。</p><hr><h1 id="5-标签"><a href="#5-标签" class="headerlink" title="5.标签"></a>5.标签</h1><p>   标签类(Label)组件用于显示一行文本信息。标签只能显示信息，不能用于输入。</p><hr><h1 id="6-按钮"><a href="#6-按钮" class="headerlink" title="6.按钮"></a>6.按钮</h1><p>   按钮(button)是最常用的组件，用来控制程序的运行方向，用户单击按钮时，计算机将执行一系列命令，完成一系列功能。按钮通过java.awt的<br>   Button类创建。</p><hr><h1 id="7-文本编辑组件"><a href="#7-文本编辑组件" class="headerlink" title="7.文本编辑组件"></a>7.文本编辑组件</h1><p>   文本编辑组件有文本行和文本区。</p><p>   文本行是一个单行文本编辑框，用于输入一行文字。文本行由java.awt包中的TextField类来创建。</p><hr><h1 id="8-Swing组件按功能可分为如下几类"><a href="#8-Swing组件按功能可分为如下几类" class="headerlink" title="8.Swing组件按功能可分为如下几类:"></a>8.Swing组件按功能可分为如下几类:</h1><ul><li>1、顶层容器:JFrame, JApplet, JDialog和JWindow。</li><li>2、中间容器:JPanel, JScrollPane, JSplitPane, JTooIBar等。</li><li>3、特殊容器:在用户界面上具有特殊作用的中间容器，如JlnternalFrame、JRootPane、JLayeredPane和JDestopPane等。</li><li>4、基本组件:实现人机交互的组件，如Button、 JComboBox、Just, Menu、Mider等。</li><li>5、不可编辑信息的显示组件:向用户显示不可编辑信息的组件，如JLabel、JProgressBar和JTooITip等。</li><li>6、可编辑信息的显示组件:向用户显示能被编辑的格式化信息的组件，如JTable、JTextArea和JTextField等。</li><li>7、特殊对话框组件:可以直接产生特殊对话框的组件，如JColorChoosor和JFileChooser等。</li></ul><hr>]]></content>
    
    <summary type="html">
    
      组件类和容器类的解释
    
    </summary>
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>选择排序</title>
    <link href="/2019/05/17/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <id>/2019/05/17/选择排序/</id>
    <published>2019-05-17T08:58:06.000Z</published>
    <updated>2019-05-17T09:08:33.163Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-选择排序和冒泡排序的区别"><a href="#一-选择排序和冒泡排序的区别" class="headerlink" title="一.选择排序和冒泡排序的区别"></a>一.选择排序和冒泡排序的区别</h3><hr><ul><li>1.冒泡排序是比较相邻位置的两个数，二选择排序是按顺序比较，找最大或者最小值。</li><li>2.冒泡排序每一轮比较后，位置不对的都需要换位置，选择排序每一轮比较只需要换一次位置。</li><li>3.冒泡排序是通过数找位置，选择排序是给定位置去找数。<h3 id="二-冒泡排序优缺点"><a href="#二-冒泡排序优缺点" class="headerlink" title="二.冒泡排序优缺点"></a>二.冒泡排序优缺点</h3></li></ul><hr><ul><li>1.优点：比较简单，空间复杂度低，是稳定的。</li><li>2。缺点：时间复杂度太高，效率慢。<h3 id="三。选择排序优缺点"><a href="#三。选择排序优缺点" class="headerlink" title="三。选择排序优缺点"></a>三。选择排序优缺点</h3></li></ul><hr><ul><li>1.优点：一轮只需要换一次位置</li><li>2.缺点：效率慢，不稳定（举个例子5，8，5，2，9我们我知道第一遍选择第一个元素5会和2交换，那么原序列中2个5的相对位置前后顺序就被破坏了）。</li></ul><hr><p><strong>这是相对简单的版本，他把最小的放在了新列表里面；还有一种做法就是把比较出来的最小值和被比较的位置交换</strong></p><hr><pre><code>def findSamllest(arr)://找最小值    smallest = arr[0]    smallest_index = 0    for i in range(1,len(arr)):        if arr[i] &lt; smallest:            smallest = arr[i]            smallest_index = i    return  smallest_indexdef selectionSort(arr)://找到最小值并且插入到新列表    newArr = []    for i in range(len(arr)):        smallest = findSamllest(arr)        newArr.append(arr.pop(smallest))    return newArrif __name__ == &#39;__main__&#39;:    print(selectionSort([5, 3, 6, 3, 2, 10]))</code></pre>]]></content>
    
    <summary type="html">
    
      选择排序代码示例和解析
    
    </summary>
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据结构" scheme="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="/2019/05/13/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>/2019/05/13/二分查找/</id>
    <published>2019-05-13T13:01:03.000Z</published>
    <updated>2019-08-11T11:29:53.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><hr><ul><li><p>代码示例</p><pre><code>def binary_search(list,item):  low = 0  high = len(list) - 1  while low &lt;= high:      mid = int((low + high)/2) //这里需要注意floa和int转型      guess = list[mid]      if guess == item:          return mid      if guess &gt; mid:          high = mid - 1      else:          low = mid + 1  return Noneif __name__ == &#39;__main__&#39;:  my_list = [1,2,3]  print(my_list)  print(binary_search(my_list,1))</code></pre></li></ul><hr><h6 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h6>]]></content>
    
    <summary type="html">
    
      二分查找代码示例和解析
    
    </summary>
    
      <category term="技术" scheme="/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据结构" scheme="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
